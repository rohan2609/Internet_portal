'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

require('cli-engine-config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = class {
  static get notPermittedError() {
    return new Error('Plugin\'s namespace not included in permitted namespaces');
  }

  static namespacePermitted(pluginPath, config) {
    return ['root', 'namespace'].includes(this.pluginNamespaceLocation(pluginPath, config));
  }

  static pluginNamespaceLocation(pluginPath, config) {
    let cliBin = config.bin;
    let namespaces = config.namespaces;
    let namespace = this.pluginNamespace(pluginPath);
    if (!namespace && !namespaces) namespace = namespaces = null;
    if (cliBin === namespace || !namespaces && !namespace) {
      return 'root';
    } else if (namespaces && namespaces.includes(namespace)) {
      return 'namespace';
    } else {
      return undefined;
    }
  }

  static pluginNamespace(pluginPath) {
    try {
      let pjson = _fsExtra2.default.readJSONSync(_path2.default.join(pluginPath, 'package.json'));
      return pjson['cli-engine'] ? pjson['cli-engine'].namespace : undefined;
    } catch (err) {
      return undefined;
    }
  }

  static namespacePlugin(plugin, pluginPath, config) {
    let pluginsLocation = this.pluginNamespaceLocation(pluginPath, config);
    if (pluginsLocation === 'root') return plugin;
    if (pluginsLocation === 'namespace') {
      let namespace = this.pluginNamespace(pluginPath);
      if (!namespace) return plugin;
      return this._namespacePlugin(namespace, plugin);
    }
    // should not get to here
    throw new Error(`Plugin ${pluginPath} namespace not permitted and may be installed incorrectly`);
  }

  static _namespacePlugin(namespace, plugin) {
    let nplugin = { namespace };
    nplugin.commands = plugin.commands.map(cmd => {
      return {
        topic: `${namespace}:${cmd.topic}`,
        command: cmd.command,
        description: cmd.description,
        run: cmd.run
      };
    });
    if (plugin.topic) {
      nplugin.topic = {
        topic: `${namespace}:${plugin.topic.name}`,
        description: plugin.topic.description,
        hidden: plugin.topic.hidden
      };
    }
    if (plugin.topics) {
      nplugin.topics = plugin.topics.map(topic => {
        return {
          topic: `${namespace}:${topic.name}`,
          description: topic.description,
          hidden: topic.hidden
        };
      });
    }
    return nplugin;
  }
};