'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('cli-engine-command');

require('cli-engine-config');

var _plugin = require('./plugin');

var _plugin2 = _interopRequireDefault(_plugin);

var _manager = require('./manager');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Cache {

  constructor(output) {
    this.out = output;
    this.config = output.config;
  }

  get file() {
    return _path2.default.join(this.config.cacheDir, 'plugins.json');
  }
  get cache() {
    if (this._cache) return this._cache;
    let initial = { version: this.config.version, plugins: {} };
    try {
      this._cache = _fsExtra2.default.readJSONSync(this.file);
    } catch (err) {
      if (err.code !== 'ENOENT') this.out.debug(err);
      this._cache = initial;
    }
    if (this._cache.version !== this.config.version) this._cache = initial;
    return this._cache;
  }

  plugin(path) {
    return this.cache.plugins[path];
  }

  updatePlugin(path, plugin) {
    this.constructor.updated = true;
    this.cache.plugins[path] = plugin;
  }

  deletePlugin(...paths) {
    for (let path of paths) {
      this.out.debug(`clearing cache for ${path}`);
      this.constructor.updated = true;
      delete this.cache.plugins[path];
    }
    this.save();
  }

  fetch(pluginPath) {
    let c = this.plugin(pluginPath.path);
    if (c) return c;
    try {
      this.out.debug('updating cache for ' + pluginPath.path);
      let cachedPlugin = pluginPath.convertToCached();
      this.updatePlugin(pluginPath.path, cachedPlugin);
      return cachedPlugin;
    } catch (err) {
      if (this.type === 'builtin') throw err;
      this.out.warn(`Error parsing plugin ${pluginPath.path}`);
      this.out.warn(err);
      return {
        name: pluginPath.path,
        path: pluginPath.path,
        version: '',
        commands: [],
        topics: []
      };
    }
  }

  fetchManagers(...managers) {
    let plugins = [];

    for (let manager of managers) {
      let paths = manager.list();
      plugins = plugins.concat(paths.map(function (pluginPath) {
        return new _plugin2.default(this.out, pluginPath, this.fetch(pluginPath));
      }, this));
    }

    this.save();

    return plugins;
  }

  save() {
    if (!this.constructor.updated) return;
    try {
      _fsExtra2.default.writeJSONSync(this.file, this.cache);
    } catch (err) {
      this.out.warn(err);
    }
  }
}
exports.default = Cache;
Cache.updated = false;