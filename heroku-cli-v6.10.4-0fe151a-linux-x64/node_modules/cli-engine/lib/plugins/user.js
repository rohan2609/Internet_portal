'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('cli-engine-config');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rwlockfile = require('rwlockfile');

var _rwlockfile2 = _interopRequireDefault(_rwlockfile);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _manager = require('./manager');

var _namespaces = require('../namespaces');

var _namespaces2 = _interopRequireDefault(_namespaces);

var _yarn = require('./yarn');

var _yarn2 = _interopRequireDefault(_yarn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class UserPlugins extends _manager.Manager {
  constructor({ out, config }) {
    super({ out, config });
    this.yarn = new _yarn2.default(this.out, this.userPluginsDir);
  }

  /**
   * list user plugins
   * @returns {PluginPath[]}
   */
  list() {
    const pjson = this.userPluginsPJSON;
    return entries(pjson.dependencies || {}).map(([name, tag]) => {
      return new _manager.PluginPath({ output: this.out, type: 'user', path: this.userPluginPath(name), tag: tag });
    });
  }

  get userPluginsPJSON() {
    try {
      return _fsExtra2.default.readJSONSync(this.userPluginsPJSONPath);
    } catch (err) {
      return { dependencies: {} };
    }
  }

  saveUserPluginsPJSON(pjson) {
    _fsExtra2.default.writeJSONSync(_path2.default.join(this.userPluginsPJSONPath), pjson);
  }

  async setupUserPlugins() {
    const pjson = _path2.default.join(this.userPluginsDir, 'package.json');
    const yarnrc = _path2.default.join(this.userPluginsDir, '.yarnrc');
    _fsExtra2.default.mkdirpSync(this.userPluginsDir);
    if (!_fsExtra2.default.existsSync(pjson)) _fsExtra2.default.writeFileSync(pjson, JSON.stringify({ private: true }));
    if (!_fsExtra2.default.existsSync(yarnrc)) _fsExtra2.default.writeFileSync(yarnrc, 'registry "https://cli-npm.heroku.com/"');
  }

  async install(name, tag = 'latest') {
    let unlock = await _rwlockfile2.default.write(this.lockfile, { skipOwnPid: true });
    await this.setupUserPlugins();
    this.addPackageToPJSON(name, tag);
    try {
      await this.yarn.exec();
      let path = this.userPluginPath(name);
      if (!_namespaces2.default.namespacePermitted(path, this.config)) throw _namespaces2.default.notPermittedError;
      // flow$ignore
      let plugin = require(path);
      if (!plugin.commands) throw new Error(`${name} does not appear to be a ${this.config.bin} CLI plugin`);
      await unlock();
      return path;
    } catch (err) {
      await unlock();
      this.removePackageFromPJSON(name);
      this.out.error(err);
      throw new Error('unreachable');
    }
  }

  async update() {
    await this.setupUserPlugins();
    await this.yarn.exec(['upgrade']);
  }

  async remove(name) {
    let unlock = await _rwlockfile2.default.write(this.lockfile, { skipOwnPid: true });
    await this.yarn.exec(['remove', name]);
    await unlock();
  }

  addPackageToPJSON(name, version = '*') {
    let pjson = this.userPluginsPJSON;
    if (!pjson.dependencies) pjson.dependencies = {};
    pjson.dependencies[name] = version;
    this.saveUserPluginsPJSON(pjson);
  }

  removePackageFromPJSON(name) {
    let pjson = this.userPluginsPJSON;
    if (!pjson.dependencies) pjson.dependencies = {};
    delete pjson.dependencies[name];
    this.saveUserPluginsPJSON(pjson);
  }

  get userPluginsDir() {
    return _path2.default.join(this.config.dataDir, 'plugins');
  }

  get userPluginsPJSONPath() {
    return _path2.default.join(this.userPluginsDir, 'package.json');
  }

  userPluginPath(name) {
    return _path2.default.join(this.userPluginsDir, 'node_modules', name);
  }

  get lockfile() {
    return _path2.default.join(this.config.cacheDir, 'plugins.lock');
  }
}

exports.default = UserPlugins;
const entries = o => Object.keys(o).map(k => [k, o[k]]);