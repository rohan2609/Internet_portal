'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('cli-engine-config');

var _output = require('cli-engine-command/lib/output');

var _output2 = _interopRequireDefault(_output);

var _ = require('.');

var _2 = _interopRequireDefault(_);

var _user = require('./user');

var _user2 = _interopRequireDefault(_user);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = class {

  constructor(plugins, config) {
    this.plugins = plugins;
    this.config = config;
    this.userPlugins = plugins.user;
    this.out = plugins.out;
  }

  async run() {
    if (_fsExtra2.default.existsSync(this.userPlugins.userPluginsPJSONPath)) return false;
    if (!_fsExtra2.default.existsSync(_path2.default.join(this.userPlugins.userPluginsDir, 'plugins.json'))) return false;
    let pljson = await this._readPluginsJSON();
    if (!pljson) return false;
    this.out.action.start('Migrating Heroku CLI v5 plugins');
    for (let p of pljson) {
      if (this.plugins.isPluginInstalled(p.name)) {
        this.out.debug(`Skipping already installed plugin: ${p.name}`);
      } else {
        await this._installPlugin(p.name, p.tag);
      }
    }
    await this.userPlugins.yarn.exec(['install', '--force']);
    this.out.action.stop();
    return true;
  }

  async _readPluginsJSON() {
    try {
      let pljsonPath = _path2.default.join(this.userPlugins.userPluginsDir, 'plugins.json');
      return _fsExtra2.default.readJSONSync(pljsonPath);
    } catch (err) {
      this.out.debug(err.message);
    }
  }

  async _installPlugin(name, tag) {
    try {
      if (tag === 'symlink') {
        await this._reinstallViaSymlink(name);
      } else {
        if (tag === '') tag = 'latest';
        await this._addToPJSON(name, tag);
      }
    } catch (err) {
      this.out.warn(err);
    }
  }

  async _reinstallViaSymlink(name) {
    this.out.debug(`Installing via symlink: ${name}`);
    let pluginPath = _fsExtra2.default.realpathSync(this.userPlugins.userPluginPath(name));
    await this.plugins.addLinkedPlugin(pluginPath);
  }

  async _addToPJSON(name, tag) {
    this.out.debug(`Adding to plugins pjson: ${name}`);
    this.plugins.addPackageToPJSON(name, tag);
  }
};